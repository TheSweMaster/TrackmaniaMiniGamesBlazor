@page "/GuessTheMap"
@using TrackManiaMiniGameBlazor.TmExchangeApi
@using TmEssentials
@inject TmExchangeApiCaller TmExchangeApiCaller
@inject TrackmaniaIoApiCaller TrackmaniaIoApiCaller

<PageTitle>Guess the map</PageTitle>

<h1>Guess the map</h1>
<p>
    <div class="row g-1 align-items-center">
        <div class="col-auto">
            <InputSelect @bind-Value="inputSelectMapPack" class="form-select form-control-lg">
                <option selected disabled hidden>Select map pack</option>
                @foreach (var item in selectMapPackOptions)
                {
                    if (item.Contains("(coming soon)"))
                    {
                        <option disabled="disabled" value="@item">@item</option>
                    }
                    else
                    {
                        <option value="@item">@item</option>
                    }
                }
            </InputSelect>
        </div>
    </div>
</p>

<p>
    <div class="row g-4 align-items-center">
        @if (inputSelectMapPack != null)
        {
            <div class="col-auto">
                <button class="btn btn-info form-control-lg" @onclick="Start">Start</button>
            </div>
        }

        @if (trackId != null)
        {
            <div class="col-auto">
                <button class="btn btn-warning form-control-lg" @onclick="GetClue">Get a clue</button>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary form-control-lg" @onclick="CheckGuess">Check guess</button>
            </div>
            <div class="col-auto">
                <button class="btn btn-danger form-control-lg" @onclick="GiveUp">Give up!</button>
            </div>
        }
    </div>
</p>

@if (trackId != null)
{
    <div class="row g-4 align-items-center">
        <div class="col-auto">
            <b>Guess map:</b>
        </div>

        <div class="col-auto">
            <InputSelect @bind-Value="inputSelectYear" class="form-select form-control-lg">
                <option selected disabled hidden>Year</option>
                @foreach (var item in selectYearOptions)
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>

        <div class="col-auto">
            <InputSelect @bind-Value="inputSelectSeason" class="form-select form-control-lg">
                <option selected disabled hidden>Season</option>
                @foreach (var item in selectSeasonOptions)
                {
                    <option value="@item">@item</option>
                }

            </InputSelect>
        </div>

        <div class="col-auto">
            <InputSelect @bind-Value="inputSelectTrack" class="form-select form-control-lg">
                <option selected disabled hidden>Track</option>
                @foreach (var item in selectTrackOptions)
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
    </div>
}

@if (trackId != null)
{
    <br />
    <div class="col-12">
        <img src="https://trackmania.exchange/maps/thumbnail/@trackId" align="middle">
    </div>
    <br />

    <div class="col-12">
        <div>@clue1</div>
    </div>

    <div class="col-12">
        <div>@clue2</div>
    </div>

    <div class="col-12">
        <div>@clue3</div>
    </div>

    <div class="col-12">
        <div>@clue4</div>
    </div>

    <div class="col-12">
        <div>@clue5</div>
    </div>
}

<div class="row g-3">

    @if (trackId != null)
    {
        <div class="col-12" style="@resultStyle">
            <span class="@resultIcon" style="@resultStyle" aria-hidden="true" />
            <b>@resultPart1</b><a target="_blank" href="https://trackmania.exchange/s/tr/@trackId"><b>@resultMapName</b></a><b>@resultPart2</b>
        </div>

        @if (isGameOver && mapDataModel != null)
        {
            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel" style="max-width:800px">
                <div class="carousel-indicators">
                    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true"></button>
                    @for (int imagePos = 1; imagePos < @mapDataModel.ImageCount; imagePos++)
                    {
                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@imagePos"></button>
                    }
                </div>
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src="https://trackmania.exchange/maps/screenshot_normal/@trackId" class="d-block w-100">
                    </div>
                    @for (int imagePos = 1; imagePos < @mapDataModel.ImageCount; imagePos++)
                    {
                        <div class="carousel-item">
                            <img src="https://trackmania.exchange/maps/@trackId/image/@imagePos" class="d-block w-100">
                        </div>
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        }
        <div></div>
    }
</div>


@code {
    private MapDataModel? mapDataModel;
    private string? inputSelectMapPack;
    private string? inputSelectYear;
    private string? inputSelectSeason;
    private string? inputSelectTrack;
    private string[] selectMapPackOptions = { "TM 2020 - Season Campaigns", "TM 2020 - TMGL (coming soon)", "TMNF - Official maps (coming soon)" };
    private string[] selectYearOptions = { "2020", "2021", "2022", "2023" };
    private string[] selectSeasonOptions = { "Winter", "Spring", "Summer", "Fall" };
    private string[] selectTrackOptions =
        { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13",
            "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25" };

    private string? resultPart1;
    private string? resultPart2;
    private string? resultMapName;
    private bool isGameOver;
    private string? resultStyle = "visibility:hidden";
    private string? resultIcon = "";
    private long? trackId;

    private string? clue1, clue2, clue3, clue4, clue5;

    private int clueCount = 0;
    private int guessCount = 0;

    private async Task Start()
    {
        clueCount = 0;
        guessCount = 0;
        isGameOver = false;
        resultPart1 = "";
        resultPart2 = "";
        resultMapName = "";
        resultStyle = "visibility:hidden";
        resultIcon = "";
        clue1 = "";
        clue2 = "";
        clue3 = "";
        clue4 = "";
        clue5 = "";
        var randomTrackId = StaticTrackIds.GetRandom();
        trackId = randomTrackId;
        mapDataModel = await TmExchangeApiCaller.GetMapData(randomTrackId);
    }

    private async Task CheckGuess()
    {
        if (inputSelectYear != null && inputSelectSeason != null && inputSelectTrack != null && mapDataModel != null)
        {
            guessCount++;

            var guessMapName = $"{inputSelectSeason} {inputSelectYear} - {inputSelectTrack}";
            var isGuessCorrect = mapDataModel.Name?.Equals(guessMapName, StringComparison.InvariantCultureIgnoreCase) ?? false;
            if (isGuessCorrect)
            {
                isGameOver = true;
                resultPart1 = $"Correct! The map was ";
                resultPart2 = $" with {guessCount} guesses and {clueCount} clues";
                resultMapName = $"{mapDataModel.Name}";
                resultStyle = "color:green";
                resultIcon = "oi oi-circle-check";
            }
            else
            {
                resultPart1 = $"Incorrect map {guessMapName}, Try again!";
                resultPart2 = $" Guesses: {guessCount} Clues: {clueCount}";
                resultMapName = "";
                resultStyle = "color:red";
                resultIcon = "oi oi-circle-x";
            }
        }
        await Task.CompletedTask;
    }

    private async Task GetClue()
    {
        if (clueCount < 5)
        {
            clueCount++;
        }

        if (mapDataModel?.TrackUID != null)
        {
            if (clueCount == 1)
            {
                var authorTime = mapDataModel.AuthorTimeDisplay.ToString();
                clue1 = $"Author time: {authorTime}";
            }
            if (clueCount == 2)
            {
                var leaderboard = await TrackmaniaIoApiCaller.GetMapLeaderboard(mapDataModel.TrackUID);
                var wrTime = leaderboard.Tops[0].TimeDisplay.ToString();
                clue2 = $"World record time: {wrTime}";
            }
            if (clueCount == 3)
            {
                var leaderboard = await TrackmaniaIoApiCaller.GetMapLeaderboard(mapDataModel.TrackUID);
                var wrPlayerName = leaderboard.Tops[0].Player.Name;
                clue3 = $"World record player: {wrPlayerName}";
            }
            if (clueCount == 4)
            {
                var diffuculty = mapDataModel.DifficultyName;
                clue4 = $"Difficulty: {diffuculty}";
            }

            if (clueCount == 5)
            {
                var diffuculty = mapDataModel.Name?.Substring(mapDataModel.Name.Length - 9, 4);
                clue5 = $"Year: {diffuculty}";
            }

        }
    }

    private async Task GiveUp()
    {
        if (mapDataModel != null)
        {
            resultPart1 = $"The map was ";
            resultMapName = $"{mapDataModel.Name}";
            resultPart2 = $"  You gave up after {guessCount} guesses and {clueCount} clues";
            resultStyle = "color:deepskyblue";
            resultIcon = "oi oi-map-marker";
            isGameOver = true;
        }
        clueCount = 0;
        guessCount = 0;
        await Task.CompletedTask;
    }
}
